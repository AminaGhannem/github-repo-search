name: CI - Tests & Security

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-test:
    name: Build & Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install deps
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build

  sast:
    name: SAST - Semgrep
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python (for semgrep CLI)
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install semgrep & jq
        run: |
          python -m pip install --upgrade pip
          pip install semgrep
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run semgrep (SAST)
        run: |
          # produce JSON even if semgrep finds issues (don't break here)
          semgrep --config=auto --json --output semgrep-report.json || true

      - name: Upload semgrep report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.json

      - name: Fail on high/critical SAST findings
        run: |
          if [ -f semgrep-report.json ]; then
            # Try multiple possible locations for severity
            HIGH=$(jq '[.results[] | select((.extra.metadata.severity? // .extra.severity? // .severity?) | test("HIGH|CRITICAL"; "i"))] | length' semgrep-report.json)
            echo "High/Critical semgrep findings: $HIGH"
            if [ "$HIGH" -gt 0 ]; then
              echo "Failing due to high/critical SAST findings"
              exit 1
            fi
          fi

  sca:
    name: SCA - npm audit
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: npm audit (json + fail on high)
        run: |
          npm audit --json > npm-audit.json || true
          cat npm-audit.json
          # upload for inspection
      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit
          path: npm-audit.json

      - name: Fail on high/critical SCA findings
        run: |
          if [ -f npm-audit.json ]; then
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' npm-audit.json)
            CRIT=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit.json)
            echo "High: $HIGH, Critical: $CRIT"
            if [ "$HIGH" -gt 0 ] || [ "$CRIT" -gt 0 ]; then
              echo "Failing due to high/critical SCA findings"
              exit 1
            fi
          fi

  dast:
    name: DAST - OWASP ZAP
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Create Docker Compose file
        run: |
          cat <<'EOF' > docker-compose.dast.yml
          version: "3.8"
          services:
            app:
              build:
                context: .
                dockerfile: Dockerfile.app
              container_name: myapp
              ports:
                - "3000:3000"
            zap:
              image: ghcr.io/zaproxy/zaproxy:stable
              depends_on:
                - app
              volumes:
                - ./zap-wrk:/zap/wrk
              command: >
                zap-baseline.py
                -t http://app:3000
                -r /zap/wrk/zap_report.html
          EOF

      - name: Build app image
        run: |
          echo "FROM node:20-alpine
          WORKDIR /app
          COPY . .
          RUN npm ci --omit=dev
          EXPOSE 3000
          CMD [\"node\", \"server.ts\"]" > Dockerfile.app
          docker build -f Dockerfile.app -t myapp:test .

      - name: Prepare ZAP workspace
        run: |
          mkdir -p zap-wrk
          chmod -R 777 zap-wrk

      - name: Run DAST scan with Docker Compose
        run: |
          docker-compose -f docker-compose.dast.yml up --abort-on-container-exit
          docker-compose -f docker-compose.dast.yml down

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-wrk/zap_report.html

      - name: Fail if ZAP found high/critical alerts
        run: |
          if grep -i -E "High|Critical" zap-wrk/zap_report.html >/dev/null 2>&1; then
            echo "ðŸš¨ DAST found High/Critical issues"
            exit 1
          fi
