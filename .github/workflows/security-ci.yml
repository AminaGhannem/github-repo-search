name: CI - Tests & Security

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-test:
    name: Build & Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install deps
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build

  sast:
    name: SAST - Semgrep
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python (for semgrep CLI)
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install semgrep & jq
        run: |
          python -m pip install --upgrade pip
          pip install semgrep
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run semgrep (SAST)
        run: |
          # produce JSON even if semgrep finds issues (don't break here)
          semgrep --config=auto --json --output semgrep-report.json || true

      - name: Upload semgrep report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.json

      - name: Fail on high/critical SAST findings
        run: |
          if [ -f semgrep-report.json ]; then
            # Try multiple possible locations for severity
            HIGH=$(jq '[.results[] | select((.extra.metadata.severity? // .extra.severity? // .severity?) | test("HIGH|CRITICAL"; "i"))] | length' semgrep-report.json)
            echo "High/Critical semgrep findings: $HIGH"
            if [ "$HIGH" -gt 0 ]; then
              echo "Failing due to high/critical SAST findings"
              exit 1
            fi
          fi

  sca:
    name: SCA - npm audit
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: npm audit (json + fail on high)
        run: |
          npm audit --json > npm-audit.json || true
          cat npm-audit.json
          # upload for inspection
      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit
          path: npm-audit.json

      - name: Fail on high/critical SCA findings
        run: |
          if [ -f npm-audit.json ]; then
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' npm-audit.json)
            CRIT=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit.json)
            echo "High: $HIGH, Critical: $CRIT"
            if [ "$HIGH" -gt 0 ] || [ "$CRIT" -gt 0 ]; then
              echo "Failing due to high/critical SCA findings"
              exit 1
            fi
          fi

  dast:
    name: DAST - OWASP ZAP
    runs-on: ubuntu-latest
    needs: [build-test]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build

      - name: Start app (background)
        run: |
          # Start vite preview on port 3000 in background and log
          npm run preview &> /tmp/preview.log &
          echo $! > /tmp/preview.pid
          # wait a bit for the process to bind
          sleep 2
        env:
          PORT: 3000

      - name: Wait for app to be ready
        run: |
          for i in {1..30}; do
            if curl -sSf http://localhost:3000/ >/dev/null 2>&1; then
              echo "App ready"
              exit 0
            fi
            echo "Waiting for app... ($i)"
            sleep 2
          done
          echo "App did not start" >&2
          tail -n +1 /tmp/preview.log || true
          exit 1

      - name: Run ZAP baseline scan
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/zap/wrk \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://localhost:3000 \
            -r zap_report.html

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            zap_report.html
            zap_report.json

      - name: Fail if ZAP found high/critical alerts
        run: |
          if [ -f zap_report.json ]; then
            HIGH=$(jq '[.site[].alerts[] | select(.risk == "High" or .risk == "Critical")] | length' zap_report.json)
            echo "ZAP High/Critical alerts: $HIGH"
            if [ "$HIGH" -gt 0 ]; then
              echo "DAST found High/Critical issues"
              exit 1
            fi
          else
            # fallback: simple HTML grep
            if grep -i -E "High|Critical" zap_report.html >/dev/null 2>&1; then
              echo "DAST found High/Critical in HTML"
              exit 1
            fi
          fi
